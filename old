AS
BEGIN

	BEGIN TRY	
	
	DECLARE @DAYS_PAST INT
	
	--GET AMOUNT OF DAYS FROM SETTINGS TABLE
	SELECT @DAYS_PAST = CONVERT(INT, SETTING_VAL) FROM DATA_CAMPAIGN_SETTINGS 
	WHERE SETTING = 'REVIEW_DAYS_PAST'

	DECLARE @FROMDATE DATETIME
	SET @FROMDATE = DATEADD(dd, -@DAYS_PAST, DATEDIFF(dd, 0, GETDATE()))

	--ORDERS IN SCOPE
	IF(EXISTS(SELECT 1 FROM SYS.TABLES T WHERE T.NAME = 'TMP_REVIEW_ALL_ORDERS'))
		BEGIN DROP TABLE TMP_REVIEW_ALL_ORDERS; END
				
	CREATE TABLE TMP_REVIEW_ALL_ORDERS(USERID INT, SIMCUSTOMERID INT, UNIQUE_ROW INT, UNIQUE_PRODUCT INT, ORDERID INT, INVOICEDATETIME DATETIME, 
				PRODUCTID INT, NAME NVARCHAR(150), SHORTNAME NVARCHAR(150),MAINIMAGEID INT, INDEXIMAGEID INT, PRICE FLOAT, ID INT,  
				MARKETINGPARTNERID INT, MAIL NVARCHAR(200), ARTICLE_ID INT)
	
	INSERT INTO TMP_REVIEW_ALL_ORDERS(USERID, SIMCUSTOMERID, UNIQUE_ROW, UNIQUE_PRODUCT, ORDERID, INVOICEDATETIME, PRODUCTID,
				NAME, SHORTNAME, MAINIMAGEID, INDEXIMAGEID , PRICE, ID , MARKETINGPARTNERID, MAIL, ARTICLE_ID)
	SELECT
		U.ID AS USERID,
		U.SIMCUSTOMERID,
		DENSE_RANK() OVER (PARTITION BY U.SIMCUSTOMERID, AP.PRODUCTID ORDER BY U.ID) AS UNIQUE_ROW,
		ROW_NUMBER() OVER (PARTITION BY U.SIMCUSTOMERID, AP.PRODUCTID ORDER BY U.ID) AS UNIQUE_PRODUCT, 
		O.ORDERID AS ORDERID,
		O.INVOICEDATETIME AS INVOICEDATETIME,	
		AP.PRODUCTID AS PRODUCTID,
		CASE WHEN APC.PRODUCTNAME IS NULL THEN AP.NAME ELSE APC.PRODUCTNAME END AS NAME,
		AP.SHORTNAME AS SHORTNAME, 
		CASE WHEN APC.PRODUCTIMAGE1 IS NULL THEN AP.MAINIMAGEID ELSE APC.PRODUCTIMAGE1 END AS MAINIMAGEID, 
		AP.INDEXIMAGEID AS INDEXIMAGEID,
		AP.PRICE,
		OLI.ID AS ID,
		O.MARKETINGPARTNERID,
		U.MAIL,
		APC.ID AS ARTICLE_ID
--	INTO #TMP_ALL
	FROM DATA_ORDERS O (nolock)
	INNER JOIN USERS_CUSTOMERS U (nolock) ON O.SIMCUSTOMERID = U.SIMCUSTOMERID
	INNER JOIN DATA_ORDERLINEITEMS OLI (nolock) ON O.ORDERID = OLI.ORDERID
	INNER JOIN DATA_ORDERLINES AS OL WITH (nolock) ON OLI.ORDERLINEID = OL.ORDERLINEID
	INNER JOIN ARTICLES_PRODUCTS AP (nolock) ON AP.PRODUCTID = OLI.PRODUCTID
	INNER JOIN ARTICLES_PRODUCTS_CONTENT APC ON OLI.PRODUCTID = APC.PRODUCTID AND U.MAIL_LANGUAGE = APC.MAIL_LANGUAGEID
	LEFT JOIN (SELECT DISTINCT USERID, INVOICEDATETIME FROM ACTION_REVIEW) AR
	ON CAST(O.INVOICEDATETIME AS DATE)= CAST(AR.INVOICEDATETIME AS DATE) AND U.ID = AR.USERID
	LEFT JOIN (SELECT DISTINCT USERID, INVOICEDATETIME FROM ACTION_REVIEW_ARTID) ARA
	ON CAST(O.INVOICEDATETIME AS DATE)= CAST(ARA.INVOICEDATETIME AS DATE) AND U.ID = ARA.USERID
	WHERE O.INVOICEDATETIME BETWEEN @FROMDATE AND DATEADD(DD, 1, @FROMDATE)
        AND Not Exists (select 1 from ACTION_REVIEW AR where O.OrderId = AR.OrderId)
		AND Not Exists (select 1 from ACTION_REVIEW_ARTID ARA where O.OrderId = ARA.OrderId)
        AND AR.USERID IS NULL
		AND ARA.USERID IS NULL -- IS DIT NODIG? 
	AND O.DELETED = 'N'
	AND U.DELETED = 'N'
	AND OLI.DELETED = 'N'
	AND AP.PRODUCTCLASSID = 1
	AND AP.PRODUCTTYPEID NOT IN (2498, 2107, 3790) --2016-04-05 Geert Metsemakers: added producttypeid instead of productid. update 2018-03-12 giftcards, fanshopproducts and vouchers are excluded.
	AND	AP.PRODUCTAVAILABILITYSTATEID <> 5
	AND	OL.TOTALSALESPRICE_IN > 0
	AND U.B2BCUSTOMER = 'N'
	AND ISNULL(O.COMPLAINT,'N') <> 'Y'
	AND ISNULL(OLI.INVOICEDQUANTITY,0) > 0

	--NO DOUBLES. IT'S NOT TENNIS.
	DELETE FROM TMP_REVIEW_ALL_ORDERS
	WHERE UNIQUE_ROW > 1
	
	--NO DOUBLE PRODUCTS 
	DELETE FROM TMP_REVIEW_ALL_ORDERS
	WHERE UNIQUE_PRODUCT > 1

	--DROP IT. LIKE ITS ALREADY REVIEWED.
	DELETE TMP_REVIEW_ALL_ORDERS
	FROM TMP_REVIEW_ALL_ORDERS T1
	INNER JOIN USERS_REVIEWCONFIRMATION T2
	ON T1.MAIL = T2.MAIL
	AND T2.CREATED_DT > T1.INVOICEDATETIME
	AND T1.PRODUCTID = T2.PRODUCTID	
	
	--DROP IT. LIKE ITS ALREADY APPROVED.
	DELETE TMP_REVIEW_ALL_ORDERS
	FROM TMP_REVIEW_ALL_ORDERS T1
	INNER JOIN USERS_REVIEWMODERATIONNOTIFICATION T2
	ON T1.MAIL = T2.MAIL
	AND T2.CREATED_DT > T1.INVOICEDATETIME
	AND T1.PRODUCTID = T2.PRODUCTID	
	
	
	--SAVE IT. ANALYZE THAT.
	INSERT INTO [DATA_REVIEW] (USERID,SIMCUSTOMERID,ORDERID,PRODUCTID,MARKETINGPARTNERID,INVOICEDATETIME,PRICE)
	SELECT T1.USERID,T1.SIMCUSTOMERID,T1.ORDERID,T1.PRODUCTID,T1.MARKETINGPARTNERID,T1.INVOICEDATETIME,T1.PRICE
	FROM TMP_REVIEW_ALL_ORDERS T1
	LEFT JOIN [DATA_REVIEW] T2
	ON T1.INVOICEDATETIME = T2.INVOICEDATETIME AND T1.USERID = T2.USERID AND T1.PRODUCTID = T2.PRODUCTID
	WHERE T2.USERID IS NULL AND not exists (select 1 from ACTION_AL_SHOPREVIEW where USERID = T1.USERID AND CAST(INVOICEDATETIME AS DATE) = CAST(T1.INVOICEDATETIME AS DATE))

	
	CREATE TABLE #TMP_ITEMS
	(
		ROWNUMBER INT,
		USERID INT,
		ORDERID INT,
		INVOICEDATETIME DATETIME,
		TOTALPRODUCTS INT,
		SHOPURL NVARCHAR(1000),	
		SINGLE_ARTICLE_NAME NVARCHAR(100),
		MARKETINGPARTNERID INT,	
		JSON NVARCHAR(MAX)
	)

	INSERT INTO #TMP_ITEMS (ROWNUMBER, USERID, INVOICEDATETIME,TOTALPRODUCTS,JSON) 
	SELECT   		 ROW_NUMBER() OVER(ORDER BY D1.USERID) AS ROWNUMBER
					, D1.USERID AS USERID
					, CAST(INVOICEDATETIME AS DATE)
					, COUNT(DISTINCT PRODUCTID) AS NUMBEROFPRODUCTS
					, '[' + (SELECT (STUFF((SELECT + ','+ CONVERT(NVARCHAR(50), D2.ARTICLE_ID) 
                                      AS [text()]
                        FROM TMP_REVIEW_ALL_ORDERS D2 WITH (NOLOCK)
                        WHERE D1.USERID = D2.USERID AND CAST(D1.INVOICEDATETIME AS DATE) = CAST(D2.INVOICEDATETIME AS DATE)
                        FOR XML PATH('')), 1, 1, ''))) + ']' AS JSON
	FROM TMP_REVIEW_ALL_ORDERS D1 WITH (NOLOCK)
	GROUP BY CAST(D1.INVOICEDATETIME AS DATE),D1.USERID
	HAVING COUNT(DISTINCT PRODUCTID) > 0

	
	--IF ONLY ONE PRODUCT, GIVE PRODUCT NAME
	UPDATE #TMP_ITEMS
	SET SINGLE_ARTICLE_NAME = NAME, MARKETINGPARTNERID = TMP_REVIEW_ALL_ORDERS.MARKETINGPARTNERID
	FROM #TMP_ITEMS
	INNER JOIN TMP_REVIEW_ALL_ORDERS ON #TMP_ITEMS.USERID = TMP_REVIEW_ALL_ORDERS.USERID
	WHERE #TMP_ITEMS.TOTALPRODUCTS = 1

	UPDATE #TMP_ITEMS
	SET ORDERID = TMP_REVIEW_ALL_ORDERS.ORDERID, MARKETINGPARTNERID = TMP_REVIEW_ALL_ORDERS.MARKETINGPARTNERID
	FROM #TMP_ITEMS
	INNER JOIN TMP_REVIEW_ALL_ORDERS ON #TMP_ITEMS.USERID = TMP_REVIEW_ALL_ORDERS.USERID
	WHERE #TMP_ITEMS.USERID IN (Select USERID From #TMP_ITEMS GROUP BY USERID HAVING COUNT(*) = 1)

	DELETE FROM #TMP_ITEMS WHERE JSON IS NULL OR JSON = '' OR 
CAST(JSON AS VARCHAR (MAX))= ''

INSERT INTO [ACTION_REVIEW_ARTID]
           ([CREATED_DT]
           ,[LISTID]
           ,[USERID]
           ,[ACTIONCODE]
           ,[ORDERID]
           ,[INVOICEDATETIME]
           ,[TOTALPRODUCTS]
           ,[MARKETINGPARTNERID]
           ,[ARTICLE_ID_BOUGHT_PRODUCT]
           )
	SELECT
		GETDATE()
		,9
		,TMP.USERID
		,'REVIEWMAIL'
		,TMP.ORDERID
		,TMP.INVOICEDATETIME
		,TMP.TOTALPRODUCTS
		,TMP.MARKETINGPARTNERID
		,TMP.JSON
	FROM #TMP_ITEMS TMP
		where not exists (select 1 from ACTION_AL_SHOPREVIEW where USERID = TMP.USERID AND CAST(INVOICEDATETIME AS DATE) = CAST(TMP.INVOICEDATETIME AS DATE))

	--DROP TABLE
	IF(EXISTS(SELECT 1 FROM SYS.TABLES T WHERE T.NAME = 'TMP_REVIEW_ALL_ORDERS'))
		BEGIN DROP TABLE TMP_REVIEW_ALL_ORDERS; END
	
END TRY
BEGIN CATCH

	DECLARE @ERROR_MSG NVARCHAR(MAX);
	DECLARE @ERROR_SEVERITY INT;
	DECLARE @ERROR_STATE INT;

	SET @ERROR_MSG = ERROR_MESSAGE();
	SET @ERROR_SEVERITY = ERROR_SEVERITY();
	SET @ERROR_STATE = ERROR_STATE();

	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH
END
